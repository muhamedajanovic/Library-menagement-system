/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frm;

import cls.DBConnect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author muham
 */
public class frmDodajPozajmnicu extends javax.swing.JFrame {

    /**
     * Creates new form frmDodajPozajmnicu
     */
    public frmDodajPozajmnicu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKorisnici = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblKnjige = new javax.swing.JTable();
        btnOdustani = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPretrazi = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPretrazi1 = new javax.swing.JTextField();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblKorisnici.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Prezime", "Email"
            }
        ));
        tblKorisnici.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKorisniciMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKorisnici);

        tblKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Autor", "Kategorija", "Kolicina"
            }
        ));
        tblKnjige.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKnjigeMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblKnjige);

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj");
        btnDodaj.setEnabled(false);
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/library-icon-10.png"))); // NOI18N
        jLabel3.setText("Biblioteka");
        jLabel3.setIconTextGap(25);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(480, 480, 480))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("PRETRAZI KORISNIKE:");

        txtPretrazi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretraziKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("PRETRAZI KNJIGE:");

        txtPretrazi1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretrazi1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPretrazi))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPretrazi1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtPretrazi1)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Connection kon = null;
    PreparedStatement ps;
    ResultSet rs;
    
    private void ucitajKnjige(){
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT knjige.ime, knjige.autor, knjige.kolicina, kategorije.naziv AS kategorija FROM knjige INNER JOIN kategorije ON knjige.kategorija = kategorije.id");
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKnjige.getModel();
            model.setRowCount(0);
            while(rs.next()){
                model.addRow(new String[]{rs.getString("ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    
    private void ucitajKorisnike(){
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT * FROM korisnici");
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKorisnici.getModel();
            model.setRowCount(0);
            while(rs.next()){
                model.addRow(new String[]{rs.getString("ime"),rs.getString("prezime"),rs.getString("email")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    
    private void btnDodajEnable(){
        int selectedRow1 = tblKorisnici.getSelectedRow();
        int selectedRow2 = tblKnjige.getSelectedRow();
        if (selectedRow1 != -1 && selectedRow2 != -1) { 
            btnDodaj.setEnabled(true);            
        } else {
            btnDodaj.setEnabled(false);            
        }
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        ucitajKnjige();
        ucitajKorisnike();
      
        
    }//GEN-LAST:event_formWindowOpened

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmAdminPanel().setVisible(true);
        frmAdminPanel.btnPozajmnice.doClick();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // TODO add your handling code here:
        if(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 3).equals("0")){
            int rezervisi = JOptionPane.showConfirmDialog(null, "Ova knjiga trenutno nije dostupna, da li zelis da te obavijestimo kada bude dostupna?", "Nema na stanju", NORMAL, NORMAL);
            if(rezervisi == 0){
                try {
                    String korisnikId = null, knjigaId = null;
                    kon = DBConnect.uspostaviKonekciju();
                    ps = kon.prepareStatement("SELECT id FROM korisnici WHERE email=?");
                    ps.setString(1, String.valueOf(tblKorisnici.getValueAt(tblKorisnici.getSelectedRow(), 2)));
                    rs=ps.executeQuery();
                    if(rs.next()){
                        korisnikId = rs.getString("id");
                    }
                    ps = kon.prepareStatement("SELECT id FROM knjige WHERE ime=? AND autor=?");
                    ps.setString(1, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 0)));
                    ps.setString(2, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 1)));
                    rs=ps.executeQuery();
                    if(rs.next()){
                        knjigaId = rs.getString("id");
                    }
                    ps = kon.prepareStatement("INSERT INTO rezervacije (korisnik_id, knjiga_id) VALUES (?, ?)");
                    ps.setString(1, korisnikId);
                    ps.setString(2, knjigaId);
                    ps.executeUpdate();
                    
                    JOptionPane.showMessageDialog(null, "Napravljena je nova rezervacija", "Nova rezervacija", JOptionPane.INFORMATION_MESSAGE);


                    this.setVisible(false);
                    new frmAdminPanel().setVisible(true);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Greška u komunikaciji sa serverom -> "+e.getMessage());
                }
            }
        
        } else {
                
            try {
                String korisnikId = null, knjigaId = null;
                kon = DBConnect.uspostaviKonekciju();
                ps = kon.prepareStatement("SELECT id FROM korisnici WHERE email=?");
                ps.setString(1, String.valueOf(tblKorisnici.getValueAt(tblKorisnici.getSelectedRow(), 2)));
                rs=ps.executeQuery();
                if(rs.next()){
                    korisnikId = rs.getString("id");
                }
                ps = kon.prepareStatement("SELECT id FROM knjige WHERE ime=? AND autor=?");
                ps.setString(1, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 0)));
                ps.setString(2, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 1)));
                rs=ps.executeQuery();
                if(rs.next()){
                    knjigaId = rs.getString("id");
                }
                ps = kon.prepareStatement("INSERT INTO pozajmnice (korisnik_id, knjiga_id) VALUES (?, ?)");
                ps.setString(1, korisnikId);
                ps.setString(2, knjigaId);
                ps.executeUpdate();

                ps = kon.prepareStatement("UPDATE knjige SET kolicina = kolicina - 1 WHERE id = ?");
                ps.setString(1, knjigaId);
                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Napravljena je nova pozajmnica", "Nova pozajmnica", JOptionPane.INFORMATION_MESSAGE);


                this.setVisible(false);
                new frmAdminPanel().setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Greška u komunikaciji sa serverom -> "+e.getMessage());
            }
        }
        

    }//GEN-LAST:event_btnDodajActionPerformed

    private void tblKorisniciMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKorisniciMouseClicked
        // TODO add your handling code here:
        btnDodajEnable();
    }//GEN-LAST:event_tblKorisniciMouseClicked

    private void tblKnjigeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKnjigeMouseClicked
        // TODO add your handling code here:        
        btnDodajEnable();
    }//GEN-LAST:event_tblKnjigeMouseClicked

    private void txtPretraziKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretraziKeyReleased
        // TODO add your handling code here:
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT * FROM korisnici WHERE ime LIKE ? or prezime LIKE ? or email LIKE ?");
            ps.setString(1, "%" + txtPretrazi.getText() + "%");
            ps.setString(2, "%" + txtPretrazi.getText() + "%");
            ps.setString(3, "%" + txtPretrazi.getText() + "%");
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKorisnici.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            model.addColumn("Ime");
            model.addColumn("Prezime");
            model.addColumn("Mail");
            model.addColumn("Admin");
            while(rs.next()){
                String isAdmin = "";
                if(rs.getString("isAdmin").equals("1")){
                    isAdmin = "Administrator";
                } else {
                    isAdmin = "Član";
                }
                model.addRow(new String[]{rs.getString("ime"),rs.getString("prezime"),rs.getString("email"),isAdmin});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_txtPretraziKeyReleased

    private void txtPretrazi1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretrazi1KeyReleased
        // TODO add your handling code here:
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT knjige.ime, knjige.autor, knjige.kolicina, kategorije.naziv AS kategorija FROM knjige INNER JOIN kategorije ON knjige.kategorija = kategorije.id WHERE ime LIKE ? OR autor LIKE ?");
            ps.setString(1, "%" + txtPretrazi1.getText() + "%");
            ps.setString(2, "%" + txtPretrazi1.getText() + "%");
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKnjige.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            model.addColumn("Ime");
            model.addColumn("Autor");
            model.addColumn("Kategorija");
            model.addColumn("Kolicina");
            while(rs.next()){
                model.addRow(new String[]{rs.getString("ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_txtPretrazi1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDodajPozajmnicu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDodajPozajmnicu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDodajPozajmnicu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDodajPozajmnicu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDodajPozajmnicu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable tblKnjige;
    private javax.swing.JTable tblKorisnici;
    private javax.swing.JTextField txtPretrazi;
    private javax.swing.JTextField txtPretrazi1;
    // End of variables declaration//GEN-END:variables
}
