/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frm;

import cls.DBConnect;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author muham
 */
public class frmUserPanel extends javax.swing.JFrame {

    /**
     * Creates new form frmUserPanel
     */
    public frmUserPanel() {
        initComponents();
        
        jTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        JTabbedPane tabbedPane = (JTabbedPane) evt.getSource();
        int selectedIndex = tabbedPane.getSelectedIndex();
        String selectedTab = tabbedPane.getTitleAt(selectedIndex);
        if (selectedTab.equals("Pozajmi")) {
            izabraniTab = "pozajmi";
            ucitajKnjige();
            txtPretrazi.setText("");
            btnDodaj.setText("Pozajmi");
            btnDodaj.setEnabled(false);
        } else if (selectedTab.equals("Vrati")) {
            izabraniTab = "vrati";
            ucitajPozajmljeneKnjige();
            txtPretrazi.setText("");
            btnDodaj.setText("Vrati");
            btnDodaj.setEnabled(false);
        }
    }
});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnOdjava1 = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtPretrazi = new javax.swing.JTextField();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblKnjige = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblKnjige1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/library-icon-10.png"))); // NOI18N
        jLabel1.setText("Biblioteka");
        jLabel1.setIconTextGap(25);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("  ");

        btnOdjava1.setText("Odjavi se");
        btnOdjava1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdjava1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnOdjava1)
                .addGap(40, 40, 40))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOdjava1))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        btnDodaj.setText("Pozajmi");
        btnDodaj.setEnabled(false);
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("PRETRAZI:");

        txtPretrazi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretraziKeyReleased(evt);
            }
        });

        tblKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Autor", "Kategorija", "Kolicina"
            }
        ));
        tblKnjige.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKnjigeMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblKnjige);

        jTabbedPane.addTab("Pozajmi", jScrollPane5);

        tblKnjige1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Autor", "Kategorija", "Kolicina"
            }
        ));
        tblKnjige1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKnjige1MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblKnjige1);

        jTabbedPane.addTab("Vrati", jScrollPane6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPretrazi))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPretrazi, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 30, Short.MAX_VALUE)
                .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Connection kon = null;
    PreparedStatement ps;
    ResultSet rs;
    
    String prijavljeniEmail, prijavljeniIme;
    
    String izabraniTab = "pozajmi";
    
    String from, to, host, sub, content;
    
    private void ucitajKnjige(){
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT knjige.ime, knjige.autor, knjige.kolicina, kategorije.naziv AS kategorija FROM knjige INNER JOIN kategorije ON knjige.kategorija = kategorije.id");
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKnjige.getModel();
            model.setRowCount(0);
            while(rs.next()){
                model.addRow(new String[]{rs.getString("ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    
     private void ucitajPozajmljeneKnjige(){
        try {
            kon = DBConnect.uspostaviKonekciju();
            ps = kon.prepareStatement("SELECT * FROM pozajmnice INNER JOIN knjige ON pozajmnice.knjiga_id = knjige.id INNER JOIN korisnici ON pozajmnice.korisnik_id = korisnici.id WHERE korisnici.email = ?");
            ps.setString(1, prijavljeniEmail);
            rs = ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel) tblKnjige1.getModel();
            model.setRowCount(0);
            while(rs.next()){
                model.addRow(new String[]{rs.getString("knjige.ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    
    private void btnDodajEnable(){
        if (tblKnjige.getSelectedRow() != -1) { 
            btnDodaj.setEnabled(true);            
        } else {
            btnDodaj.setEnabled(false);            
        }
    }
    
    private void btnOdjava1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdjava1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmLogin().setVisible(true);
        prijavljeniEmail = "";
        prijavljeniIme = "";
    }//GEN-LAST:event_btnOdjava1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        ucitajKnjige();
        
        if(frmLogin.emailTxtBox.getText().isEmpty()){
            prijavljeniEmail = frmRegistracija.emailTxtBox.getText();
        } else {
            prijavljeniEmail = frmLogin.emailTxtBox.getText();
        }
        
        try {
            ps = kon.prepareStatement("SELECT ime FROM korisnici where email = ?");
            ps.setString(1, prijavljeniEmail);
            rs = ps.executeQuery();
            if(rs.next()){
                prijavljeniIme = rs.getString("ime");
            }
        } catch (Exception e) {
        }
        
        jLabel2.setText("Dobro dosli, " + prijavljeniIme);
    }//GEN-LAST:event_formWindowOpened

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        // TODO add your handling code here:
        int brojPozajmnica = 0;
        
        try {
            ps = kon.prepareStatement("SELECT COUNT(*) FROM pozajmnice INNER JOIN korisnici ON pozajmnice.korisnik_id = korisnici.id WHERE korisnici.email=?");
            ps.setString(1, prijavljeniEmail);
            rs = ps.executeQuery();
            if(rs.next()){
                brojPozajmnica = rs.getInt(1);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
        if(izabraniTab.equals("pozajmi")){
            if(brojPozajmnica<3){
                if(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 3).equals("0")){
                    int rezervisi = JOptionPane.showConfirmDialog(null, "Ova knjiga trenutno nije dostupna, da li zelis da te obavijestimo kada bude dostupna?", "Nema na stanju", NORMAL, NORMAL);
                    if(rezervisi == 0){
                        try {
                            String korisnikId = null, knjigaId = null;
                            kon = DBConnect.uspostaviKonekciju();
                            ps = kon.prepareStatement("SELECT id FROM korisnici WHERE email=?");
                            ps.setString(1, prijavljeniEmail);
                            rs=ps.executeQuery();
                            if(rs.next()){
                                korisnikId = rs.getString("id");
                            }
                            ps = kon.prepareStatement("SELECT id FROM knjige WHERE ime=? AND autor=?");
                            ps.setString(1, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 0)));
                            ps.setString(2, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 1)));
                            rs=ps.executeQuery();
                            if(rs.next()){
                                knjigaId = rs.getString("id");
                            }
                            ps = kon.prepareStatement("INSERT INTO rezervacije (korisnik_id, knjiga_id) VALUES (?, ?)");
                            ps.setString(1, korisnikId);
                            ps.setString(2, knjigaId);
                            ps.executeUpdate();

                            JOptionPane.showMessageDialog(null, "Napravljena je nova rezervacija", "Nova rezervacija", JOptionPane.INFORMATION_MESSAGE);



                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Greška u komunikaciji sa serverom -> "+e.getMessage());
                        }
                    }
                } else {
                    try {
                        String korisnikId = null, knjigaId = null;
                        kon = DBConnect.uspostaviKonekciju();
                        ps = kon.prepareStatement("SELECT id FROM korisnici WHERE email=?");
                        ps.setString(1, prijavljeniEmail);
                        rs=ps.executeQuery();
                        if(rs.next()){
                            korisnikId = rs.getString("id");
                        }
                        ps = kon.prepareStatement("SELECT id FROM knjige WHERE ime=? AND autor=?");
                        ps.setString(1, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 0)));
                        ps.setString(2, String.valueOf(tblKnjige.getValueAt(tblKnjige.getSelectedRow(), 1)));
                        rs=ps.executeQuery();
                        if(rs.next()){
                            knjigaId = rs.getString("id");
                        }
                        ps = kon.prepareStatement("INSERT INTO pozajmnice (korisnik_id, knjiga_id) VALUES (?, ?)");
                        ps.setString(1, korisnikId);
                        ps.setString(2, knjigaId);
                        ps.executeUpdate();
                        ps = kon.prepareStatement("UPDATE knjige SET kolicina = kolicina - 1 WHERE id = ?");
                        ps.setString(1, knjigaId);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Napravljena je nova pozajmnica", "Nova pozajmnica", JOptionPane.INFORMATION_MESSAGE);

                        ucitajKnjige();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Greška u komunikaciji sa serverom -> "+e.getMessage());
                    }

                };
            } else {
                JOptionPane.showMessageDialog(rootPane, "Ne mozete pozajmniti vise od 3 knjige istovremeno" , "Obavjestenje", NORMAL);
            }
        } else if (izabraniTab.equals("vrati")){
            int izbor = JOptionPane.showConfirmDialog(null, "Da li zelite vratiti knjigu " + tblKnjige1.getValueAt(tblKnjige1.getSelectedRow(), 0) +"?");

            if(izbor == 0){
                try {
                    ps = kon.prepareStatement("SELECT * FROM rezervacije INNER JOIN knjige ON rezervacije.knjiga_id = knjige.id INNER JOIN korisnici ON rezervacije.korisnik_id = korisnici.id WHERE knjige.ime = ?");
                    ps.setString(1, (String) tblKnjige1.getValueAt(tblKnjige1.getSelectedRow(), 0));
                    rs = ps.executeQuery();
                    while(rs.next()){
                        from = "softverskotest@gmail.com";
                        to = rs.getString("korisnici.email");
                        host = "localhost";
                        sub = "Knjiga opet dostupna";
                        content = "Postovani, knjiga '" + rs.getString("knjige.ime") + "' je opet na stanju. Mozete je rezervisati putem Biblioteka aplikacije";

                        Properties p = new Properties();
                        p.put("mail.smtp.auth", "true");
                        p.put("mail.smtp.starttls.enable", "true");
                        p.put("mail.smtp.host", "smtp.gmail.com");
                        p.put("mail.smtp.port", "587");

                        Session s = Session.getDefaultInstance(p, new javax.mail.Authenticator() {
                            protected PasswordAuthentication getPasswordAuthentication(){
                                return new PasswordAuthentication("softverskotest@gmail.com", "hciadmguqihvylsi");
                            }

                        });   

                        try {
                            MimeMessage m = new MimeMessage(s);
                            m.setFrom(from);
                            m.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
                            m.setSubject(sub);
                            m.setText(content);

                            Transport.send(m);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                        try {
                            String knjigaId = null;
                            ps=kon.prepareStatement("SELECT id FROM knjige WHERE ime = ?");
                            ps.setString(1, String.valueOf(tblKnjige1.getValueAt(tblKnjige1.getSelectedRow(), 0)));
                            rs = ps.executeQuery();
                            if(rs.next()){
                                knjigaId = rs.getString("id");
                            };
                            System.out.println(knjigaId);
                            ps = kon.prepareStatement("DELETE FROM rezervacije WHERE knjiga_id = ?");
                            ps.setString(1, knjigaId);
                            ps.executeUpdate();
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e);
                        }
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(frmAdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                        ps = kon.prepareStatement("UPDATE knjige SET kolicina = kolicina + 1 WHERE ime = ?");
                        ps.setString(1, (String) tblKnjige1.getValueAt(tblKnjige1.getSelectedRow(), 0));
                        ps.executeUpdate();
                        ps = kon.prepareStatement("DELETE FROM pozajmnice WHERE knjiga_id IN (SELECT knjige.id FROM knjige INNER JOIN korisnici ON pozajmnice.korisnik_id = korisnici.id WHERE knjige.ime = ? AND korisnici.email = ?)");
                        ps.setString(1, (String) tblKnjige1.getValueAt(tblKnjige1.getSelectedRow(), 0));
                        ps.setString(2, prijavljeniEmail);
                        ps.executeUpdate();
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }
                ucitajPozajmljeneKnjige();
            }
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void txtPretraziKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretraziKeyReleased
        // TODO add your handling code here:
        if(izabraniTab.equals("pozajmi")){
            try {
                kon = DBConnect.uspostaviKonekciju();
                ps = kon.prepareStatement("SELECT knjige.ime, knjige.autor, knjige.kolicina, kategorije.naziv AS kategorija FROM knjige INNER JOIN kategorije ON knjige.kategorija = kategorije.id WHERE ime LIKE ? OR autor LIKE ?");
                ps.setString(1, "%" + txtPretrazi.getText() + "%");
                ps.setString(2, "%" + txtPretrazi.getText() + "%");
                rs = ps.executeQuery();
                DefaultTableModel model = (DefaultTableModel) tblKnjige.getModel();
                model.setRowCount(0);
                model.setColumnCount(0);
                model.addColumn("Ime");
                model.addColumn("Autor");
                model.addColumn("Kategorija");
                model.addColumn("Kolicina");
                while(rs.next()){
                    model.addRow(new String[]{rs.getString("ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        } else {
            try {
                kon = DBConnect.uspostaviKonekciju();
                ps = kon.prepareStatement("SELECT * FROM pozajmnice INNER JOIN knjige ON pozajmnice.knjiga_id = knjige.id INNER JOIN korisnici ON pozajmnice.korisnik_id = korisnici.id WHERE korisnici.email = ? AND knjige.ime LIKE ? AND knjige.autor LIKE ?");
                ps.setString(1, prijavljeniEmail);
                ps.setString(2, "%" + txtPretrazi.getText() + "%");
                ps.setString(3, "%" + txtPretrazi.getText() + "%");
                rs = ps.executeQuery();
                DefaultTableModel model = (DefaultTableModel) tblKnjige1.getModel();
                model.setRowCount(0);
                model.setColumnCount(0);
                model.addColumn("Ime");
                model.addColumn("Autor");
                model.addColumn("Kategorija");
                model.addColumn("Kolicina");
                while(rs.next()){
                    model.addRow(new String[]{rs.getString("ime"),rs.getString("autor"),rs.getString("kategorija"),rs.getString("kolicina")});
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
            
    }//GEN-LAST:event_txtPretraziKeyReleased

    private void tblKnjigeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKnjigeMouseClicked
        // TODO add your handling code here:int selectedRow = tblPrikaz.getSelectedRow();
        int selectedRow = tblKnjige.getSelectedRow();
        if (selectedRow != -1) { 
            btnDodaj.setEnabled(true); 
        } else {
            btnDodaj.setEnabled(false);
        }
    }//GEN-LAST:event_tblKnjigeMouseClicked

    private void tblKnjige1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKnjige1MouseClicked
        // TODO add your handling code here:int selectedRow = tblPrikaz.getSelectedRow();
        int selectedRow = tblKnjige1.getSelectedRow();
        if (selectedRow != -1) { 
            btnDodaj.setEnabled(true); 
        } else {
            btnDodaj.setEnabled(false);
        }
    }//GEN-LAST:event_tblKnjige1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUserPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUserPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnOdjava1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable tblKnjige;
    private javax.swing.JTable tblKnjige1;
    private javax.swing.JTextField txtPretrazi;
    // End of variables declaration//GEN-END:variables
}
